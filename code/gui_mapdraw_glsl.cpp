
const char *fallbackShader_mapdraw_fp =
"#version 450 core\n"
"\n"
"#define POINT_LIGHT 0\n"
"#define DIRECTION_LIGHT 1\n"
"#define MAX_LIGHTS 1024\n"
"\n"
"layout( location = 0 ) out vec4 a_Color;\n"
"\n"
"in vec3 v_Position;\n"
"in vec3 v_WorldPos;\n"
"in vec2 v_TexCoords;\n"
"in vec4 v_Color;\n"
"\n"
"uniform sampler2D u_DiffuseMap;\n"
"uniform sampler2D u_SpecularMap;\n"
"uniform sampler2D u_NormalMap;\n"
"uniform sampler2D u_AmbientOcclusionMap;\n"
"uniform sampler2D u_PointLightTexture;\n"
"uniform vec2 u_PointLightTexCoords;\n"
"\n"
"struct Light {\n"
"   vec4 color;\n"
"   uvec2 origin;\n"
"   float brightness;\n"
"   float range;\n"
"   float linear;\n"
"   float quadratic;\n"
"   float constant;\n"
"   int type;\n"
"};\n"
"\n"
"layout( std140 ) uniform LightData {\n"
"   Light lights[MAX_LIGHTS];\n"
"};\n"
"uniform int u_NumLights;\n"
"uniform vec3 u_AmbientLightColor;\n"
"\n"
"uniform bool u_FramebufferActive;\n"
"uniform float u_CameraZoom;\n"
"\n"
"uniform bool u_UseDiffuseMapping;\n"
"uniform bool u_UseSpecularMapping;\n"
"uniform bool u_UseNormalMapping;\n"
"uniform bool u_UseAmbientOcclusionMapping;\n"
"uniform bool u_TileSelected;\n"
"uniform int u_TileSelectionX;\n"
"uniform int u_TileSelectionY;\n"
"uniform bool u_FilterSpawns;\n"
"uniform bool u_FilterCheckpoints;\n"
"\n"
"uniform vec4 u_TexUsage;\n"
"\n"
"void CalcNormal() {\n"
"    vec3 normal = texture( u_NormalMap, v_TexCoords ).rgb;\n"
"    normal = normalize( normal * 2.0 - 1.0 );\n"
"    a_Color.rgb *= normal * 0.5 + 0.5;\n"
"}\n"
"\n"
"void CalcLighting() {\n"
"    a_Color = texture( u_DiffuseMap, v_TexCoords );\n"
"    if ( u_UseNormalMapping ) {\n"
"        CalcNormal();\n"
"    }\n"
"    if ( u_UseSpecularMapping ) {\n"
"        a_Color.rgb += texture( u_SpecularMap, v_TexCoords ).rgb;\n"
"    }\n"
"    for ( int i = 0; i < u_NumLights; i++ ) {\n"
"        vec3 diffuse = a_Color.rgb;\n"
"        float dist = distance( v_WorldPos, uvec3( lights[i].origin, v_WorldPos.z ) );\n"
"        float diff = 0.0;\n"
"        float range = lights[i].range;\n"
"        if ( dist <= lights[i].range ) {\n"
"            diff = 1.0 - abs( dist / range );\n"
"        }\n"
"        diffuse = min( diff * ( diffuse + vec3( lights[i].color ) ), diffuse );\n"
"        a_Color.rgb += diffuse;\n"
"    }\n"
"    a_Color.rgb += texture( u_DiffuseMap, v_TexCoords ).rgb;\n"
"}\n"
"\n"
"void main() {\n"
"    if ( u_FramebufferActive ) {\n"
"        a_Color = texture( u_DiffuseMap, v_TexCoords );\n"
"    }\n"
"    else {\n"
"        if ( !u_UseDiffuseMapping && !u_UseSpecularMapping && !u_UseNormalMapping && !u_UseAmbientOcclusionMapping ) {\n"
"            a_Color = vec4( 1.0 );\n"
"        } else {\n"
"            CalcLighting();\n"
"        }\n"
"        a_Color.rgb *= u_AmbientLightColor;\n"
"    }\n"
"    if ( u_TileSelected && u_TileSelectionX == v_WorldPos.x && u_TileSelectionY == v_WorldPos.y\n"
"        || ( u_FilterCheckpoints && v_Color.a == 0.04546 ) || ( u_FilterSpawns && v_Color.a == 0.07274 ) )\n"
"    {\n"
"        a_Color.rgb *= v_Color.rgb;\n"
"    }\n"
"}\n"
;

const char *fallbackShader_mapdraw_vp =
"#version 450 core\n"
"\n"
"layout( location = 0 ) in vec4 a_Color;\n"
"layout( location = 1 ) in vec3 a_Position;\n"
"layout( location = 2 ) in vec3 a_WorldPos;\n"
"layout( location = 3 ) in vec2 a_TexCoords;\n"
"\n"
"out vec3 v_Position;\n"
"out vec3 v_WorldPos;\n"
"out vec2 v_TexCoords;\n"
"out vec4 v_Color;\n"
"\n"
"uniform mat4 u_ModelViewProjection;\n"
"\n"
"void main() {\n"
"   v_Position = a_Position;\n"
"   v_WorldPos = a_WorldPos;\n"
"   v_TexCoords = a_TexCoords;\n"
"   v_Color = a_Color;\n"
"   gl_Position = vec4( u_ModelViewProjection * vec4( a_Position, 1.0 ) );\n"
"}\n"
;
